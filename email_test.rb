require 'viewpoint'
require 'gmail'
require 'yaml'
include Viewpoint::EWS

class EmailUser

  attr_reader :name, :email_address, :servertype, :user, :pass, :server
  
  def initialize(name,email_address,servertype,user,pass,server)
    @name = name
    @email_address = email_address
    @servertype = servertype
    @user = user
    @pass = pass
    @server = server
  end
    
end

class TestEmail

  attr_reader :sender, :recipient, :attempts
  
  
  def initialize(sender,recipient,attempts,wait)
    @sender = sender
    @recipient = recipient
    @attempts = attempts
    @subject = nil
    @body = nil
    @result = Hash.new
    @date = nil
    @wait = wait
    @conversation_id = nil
  end
  
  def test_email
    checked=false
    to_wait = @wait
        
      if send_email
        
        i=0
        
        begin
          i += 1
          sleep(to_wait)
          checked=check_email
          
        end until i >= @attempts || checked
              
      end               
    
      @result= {success: checked, sender: @sender.email_address, recipient: @recipient.email_address, subject: @subject, date: @date, conversation_id: @conversation_id}
      
      return @result
    
  end
  
  private
  
  def send_email
    
    @subject = 'TEST_' + Array.new(20){[*"A".."Z", *"0".."9"].sample}.join
    @body = "Testing email system\r Generated by IT Email Test System"
    
    case @sender.servertype
      when "EWS" then send_email_ews
      when "GMAIL" then send_email_gmail
      else false    
    end
        
  end
  
  def check_email
    
    case @recipient.servertype
      when "EWS" then check_email_ews
      when "GMAIL" then check_email_gmail
      else false 
    end
    
  end
  
  def send_email_ews
    
    ews = Viewpoint::EWSClient.new @sender.server, @sender.user, @sender.pass
    
    ews.send_message do |m|
      m.subject = @subject
      m.body    = @body
      m.to_recipients << @recipient.email_address
    end
  
  end
  
  def send_email_gmail
    
    gmail = Gmail.new(@sender.user, @sender.pass)
    
    to_email = @recipient.email_address
    to_subject = @subject
    to_body = @body
    
    gmail.deliver do
      to to_email
      subject to_subject
      text_part do
        body to_body
      end
      
    end
    
    gmail.logout
    
    return true    
    
  end
  
  def check_email_ews
    check = false
    
    ews = Viewpoint::EWSClient.new @recipient.server, @recipient.user, @recipient.pass
    
    inbox = ews.get_folder_by_name 'inbox'
    items = inbox.search_by_subject @subject
    items.each do  |i| 
      
      if i.subject == @subject && !i.is_read?        
        i.mark_read!
        @date = i.date_time_sent
        @conversation_id = i.conversation_id
        check = true 
      end        
      
    end
    
    check
        
  end
  
  def check_email_gmail
    check = false
    
    gmail = Gmail.new(@recipient.user, @recipient.pass)
        
    gmail.inbox.emails(:unread, :subject => @subject ).each do |email|
      email.mark(:read)
      @date = email.date
      @conversation_id = email.message_id 
      check = true      
    end
    
    gmail.logout
    
    check
    
  end
  
end

def load_config
  config = YAML.load_file("email_test.yaml")
  return config
end

def get_global_config(config)
  return config["config"]
end

def get_users_config(config)
  conf_obj = Hash.new
    
  config.each do |k,v|
    if k != 'config'
        emailu = EmailUser.new k,v["email_address"],v["servertype"],v["user"],v["pass"],v["server"]
        conf_obj[k] = emailu
    end    
  end  
  return conf_obj
end

if ARGV.size != 2
  
  puts "Usage: email_test <sender> <recipient>"
  exit
end

s_name = ARGV[0]
r_name = ARGV[1]

config = load_config
g_config = get_global_config(config)

if g_config.nil?
  puts "config error"
  exit
end

u_config = get_users_config(config)

if u_config.nil?
  puts "user config error"
  exit
end

if u_config[s_name].nil?
  puts "sender not found"
  exit
end

if u_config[r_name].nil?
  puts "recipient not found"
  exit
end

test = TestEmail.new u_config[s_name], u_config[r_name], g_config["attempts"], g_config["wait"]

test_result = test.test_email

test_result.each { |k,v| puts "#{k}:#{v}"}




